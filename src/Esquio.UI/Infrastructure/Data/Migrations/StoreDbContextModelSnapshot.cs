// <auto-generated />
using Esquio.EntityFrameworkCore.Store;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Esquio.UI.Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview6.19304.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ApiKeyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.FeatureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ProductEntityId");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.FeatureTagEntity", b =>
                {
                    b.Property<int>("FeatureEntityId");

                    b.Property<int>("TagEntityId");

                    b.HasKey("FeatureEntityId", "TagEntityId");

                    b.HasIndex("TagEntityId");

                    b.ToTable("FeatureTags");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ParameterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ToggleEntityId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ToggleEntityId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ToggleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeatureEntityId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasAlternateKey("Type", "FeatureEntityId")
                        .HasName("IX_ToggeFeature");

                    b.HasIndex("FeatureEntityId");

                    b.ToTable("Toggles");
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.FeatureEntity", b =>
                {
                    b.HasOne("Esquio.EntityFrameworkCore.Store.Entities.ProductEntity", "ProductEntity")
                        .WithMany("Features")
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.FeatureTagEntity", b =>
                {
                    b.HasOne("Esquio.EntityFrameworkCore.Store.Entities.FeatureEntity", "FeatureEntity")
                        .WithMany("FeatureTags")
                        .HasForeignKey("FeatureEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Esquio.EntityFrameworkCore.Store.Entities.TagEntity", "TagEntity")
                        .WithMany()
                        .HasForeignKey("TagEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ParameterEntity", b =>
                {
                    b.HasOne("Esquio.EntityFrameworkCore.Store.Entities.ToggleEntity", null)
                        .WithMany("Parameters")
                        .HasForeignKey("ToggleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Esquio.EntityFrameworkCore.Store.Entities.ToggleEntity", b =>
                {
                    b.HasOne("Esquio.EntityFrameworkCore.Store.Entities.FeatureEntity", null)
                        .WithMany("Toggles")
                        .HasForeignKey("FeatureEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
