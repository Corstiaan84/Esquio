@inject ConfirmState  confirmState
@implements IDisposable

<IconButton @ref="iconButton" Title="@Title" Icon="@Icon" OnClick="OnClick" Spinner="true" />

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public string ConfirmTitle { get; set; }
    [Parameter] public string ConfirmDescription { get; set; }

    private Guid actionId = Guid.NewGuid();
    private IconButton iconButton;

    public void Dispose()
    {
        confirmState.OnConfirm -= _OnConfirm;
        confirmState.OnCancel -= _OnCancel;

    }

    protected override void OnInitialized()
    {
        confirmState.OnConfirm += _OnConfirm;
        confirmState.OnCancel += _OnCancel;
    }

    private void OnClick()
    {
        confirmState.ShowConfirmModal(ConfirmTitle, ConfirmDescription, actionId);
    }

    private async ValueTask _OnConfirm(Guid actionId)
    {
        if (actionId != this.actionId) return;

        await OnConfirm.InvokeAsync(null);
        iconButton.Reset();
        StateHasChanged();
    }

    private void _OnCancel()
    {
        iconButton.Reset();
        StateHasChanged();
    }
}
