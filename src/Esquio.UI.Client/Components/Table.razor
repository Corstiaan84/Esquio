@typeparam TResponse
@inject NavigationManager Navigation

@if (items == null)
{
    <div class="card">
        <div class="card-header">
            <div class="card-tools">
                <ul class="pagination pagination-sm float-right skeleton">
                    <li>
                        <div class="line"></div>
                    </li>
                </ul>
            </div>
        </div>
        <!-- /.card-header -->
        <div class="card-body p-0">
            <table class="table table-hover table-component">
                <thead>
                    @TableHeader
                </thead>
                <tbody>
                    @for (int i = 0; i < SkeletonRows; i++)
                    {
                    <tr>
                        @for (int j = 0; j < SkeletonColumns - SkeletonActions; j++)
                        {
                            <td>
                                <div class="line"></div>
                            </td>
                        }
                        @for (int k = 0; k < SkeletonActions; k++)
                        {
                            <td>
                                <div class="action"></div>
                            </td>
                        }
                    </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- /.card-body -->
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="card-tools">
                <ul class="pagination pagination-sm float-right">
                    <li class="page-item@(pageIndex  == 0 ? " disabled": "")">
                        <a
                            class="page-link"
                            href="#"
                            @onclick="GoFirst"
                            @onclick:preventDefault>
                            «
                        </a>
                    </li>
                    @for (int i = 1; i <= pages; i++)
                    {
                        // See: https://github.com/dotnet/aspnetcore/issues/16809
                        var index = i - 1;
                        <li class="page-item">
                            <a
                               class="page-link"
                               href="#"
                               @onclick="@(() => Load(index))"
                               @onclick:preventDefault>
                                @i
                            </a>
                        </li>
                    }
                    <li class="page-item@(pages == pageIndex + 1 ? " disabled": "")">
                        <a
                           class="page-link"
                           href="#"
                           @onclick="GoLast"
                           @onclick:preventDefault>
                            »
                        </a>
                    </li>
                </ul>
            </div>
        </div>
        <!-- /.card-header -->
        <div class="card-body p-0">
            <table class="table table-hover table-component">
                <thead>
                    <tr>
                        @TableHeader
                    </tr>
                </thead>
                <tbody>
                    @TableBody(items)
                </tbody>
            </table>
        </div>
        <!-- /.card-body -->
    </div>
}

@code {
    [Parameter] public int SkeletonRows { get; set; }
    [Parameter] public int SkeletonColumns { get; set; }
    [Parameter] public int SkeletonActions { get; set; }
    [Parameter] public Func<int, int, Task<TResponse>> Loader { get; set; }
    [Parameter] public Func<TResponse, int> Total { get; set; }
    [Parameter] public Func<TResponse, int> Count { get; set; }
    [Parameter] public RenderFragment TableHeader { get; set; }
    [Parameter] public RenderFragment<TResponse> TableBody { get; set; }

    private TResponse items;
    private int pages = 0;
    private int pageIndex = 0;
    private const int pageCount = 10;

    protected override async Task OnInitializedAsync()
    {
        if (Total == null) throw new ArgumentNullException($"The {nameof(Total)} parameter is required.");
        if (Count == null) throw new ArgumentNullException($"The {nameof(Count)} parameter is required.");
        if (Loader == null) throw new ArgumentNullException($"The {nameof(Loader)} parameter is required.");
        await Load();
    }

    public async Task OnAdd()
    {
        var prevCount = Count(items);
        items = await Load(pageIndex);
        if (prevCount == pageCount)
        {
            await Load(pageIndex + 1);
        }
    }

    public async Task OnDelete()
    {
        items = await Load(pageIndex);
        if (Count(items) == 0 && pageIndex > 0)
        {
            await Load(pageIndex - 1);
        }
    }

    public Task Reload() => Load(pageIndex);

    private async Task<TResponse> Load(int pageIndex = 0)
    {
        this.pageIndex = pageIndex;
        items = await Loader(pageIndex, pageCount);
        pages = (Total(items) + pageCount - 1) / pageCount;
        return items;
    }

    private Task<TResponse> GoFirst() => Load();
    private Task<TResponse> GoLast() => Load(pages - 1);
}
