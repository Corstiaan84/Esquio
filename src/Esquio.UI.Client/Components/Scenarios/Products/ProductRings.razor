@inject IEsquioHttpClient esquioHttpClient

@if (deployments != null)
{
    @if (HasPermission == false)
    {
        <select class="form-control" @onchange="@(@event => OnChange.InvokeAsync(@event.Value.ToString()))" disabled>
            @foreach (var item in deployments)
            {
                @if (item.Default)
                {
                    <option value="@item.Name" selected>
                        @($"{item.Name} (default deployment)")
                    </option>
                }
                else
                {
                    <option value="@item.Name">
                        @item.Name
                    </option>
                }
            }
        </select>
    }
    else
    {
        <select class="form-control" @onchange="@(@event => OnChange.InvokeAsync(@event.Value.ToString()))">
            @foreach (var item in deployments)
            {
                @if (item.Default)
                {
                    <option value="@item.Name" selected>
                        @($"{item.Name} (default deployment)")
                    </option>
                }
                else
                {
                    <option value="@item.Name">
                        @item.Name
                    </option>
                }
            }
        </select>
    }
}

@code {
    [Parameter] public string ProductName { get; set; }
    [Parameter] public EventCallback<string> OnChange { get; set; }
    [CascadingParameter(Name = "HasPermission")] bool? HasPermission { get; set; }

    private IEnumerable<DeploymentResponseDetail> deployments;

    protected override async Task OnInitializedAsync()
    {
        var product = await esquioHttpClient.GetProduct(ProductName);
        deployments = product.Deployments;
        await OnChange.InvokeAsync(deployments.Single(r => r.Default).Name);
    }
}
