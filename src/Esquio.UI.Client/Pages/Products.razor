@page "/products"
@attribute [Authorize]
@inherits ContainerComponentBase

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            @*<div class="col-sm-6">
                    <Breadcrumb Items="breadcrumb" />
                </div>*@
            <PageTitle Title="Products"
                       Subtitle="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore.">
                <Icon>
                    <i class="fas fa-box-open"></i>
                </Icon>
                <Actions>
                    <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenModal">
                        New Product
                    </button>
                </Actions>
            </PageTitle>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <Table Loader="Loader"
                       Total="@(items => items.Total)"
                       Count="@(items => items.Count)"
                       SkeletonRows="3"
                       SkeletonColumns="3"
                       SkeletonActions="1"
                       @ref="table">
                    <TableHeader>
                        <th class="table-col-4">Name</th>
                        <th>Description</th>
                        <th class="table-col-2"></th>
                    </TableHeader>
                    <TableBody Context="products">
                        @foreach (var product in products.Result)
                        {
                            <tr @onclick="@(e => NavigateTo($"products/{product.Name}"))">
                                <td>@product.Name</td>
                                <td>@product.Description</td>
                                <td class="table-component__action">
                                    <i
                                       class="far fa-trash-alt"
                                       @onclick="@(() => Delete(product.Name))"
                                       @onclick:stopPropagation></i>
                                </td>
                            </tr>
                        }
                    </TableBody>
                </Table>
            </div>
        </div>
    </div>
</section>

<Modal Title="New Product" Show="showModal" OnClose="CloseModal">
    <ModalBody>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="product-name">Name</label>
                <InputText id="product-name" class="form-control" @bind-Value="model.Name" placeholder="Enter product name" />
            </div>

            <div class="form-group">
                <label for="product-description">Description</label>
                <InputText id="product-description" class="form-control" @bind-Value="model.Description" placeholder="Enter product description" />
            </div>

            <div class="form-group">
                <label for="product-default-ring-name">Default Ring Name</label>
                <InputText id="product-default-ring-name" class="form-control" @bind-Value="model.DefaultRingName" placeholder="Enter product default ring name" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="Add" disabled="@formInvalid">Save changes</button>
    </ModalFooter>
</Modal>

@code {
    private bool showModal = false;
    private bool formInvalid = true;
    private ProductViewModel model;
    private EditContext editContext;
    private BreadcrumbItemViewModel[] breadcrumb;
    private Table<ListProductResponse> table;

    protected override void OnInitialized()
    {
        InitModel();

        editContext.OnFieldChanged += (_, __) =>
        {
            formInvalid = !editContext.Validate();
            StateHasChanged();
        };
    }

    protected override void OnParametersSet()
    {
        breadcrumb = new[]
        {
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Active = true }
        };
    }

    private void InitModel()
    {
        model = new ProductViewModel();
        editContext = new EditContext(model);
    }

    private Task<ListProductResponse> Loader(int pageIndex, int pageCount)
        => Client.Products_ListAsync(pageIndex, pageCount);

    private async Task Add()
    {
        await Client.Products_AddAsync(model.ToRequest());
        await table.OnAdd();
        CloseModal();
        InitModel();
    }

    private async Task Delete(string productName)
    {
        await Client.Products_DeleteAsync(productName);
        await table.OnDelete();
    }

    private void OpenModal()
    {
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
}
