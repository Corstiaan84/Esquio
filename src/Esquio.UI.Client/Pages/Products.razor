@page "/products"
@attribute [Authorize]

@inject IEsquioHttpClient esquioHttpClient
@inject EsquioState  esquioState
@inject NavigationManager navigation

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <PageTitle Title="Products"
                       Subtitle="Show the Esquio Products in the store.">
                <Icon>
                    <i class="fas fa-box-open"></i>
                </Icon>
                <Actions>
                    <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenModal">
                        New Product
                    </button>
                </Actions>
            </PageTitle>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <PaginationTable Loader="Loader" @ref="table">
                    <TableHeader>
                        <th class="table-col-4">Name</th>
                        <th>Description</th>
                        <th class="table-col-2"></th>
                    </TableHeader>
                    <TableBody Context="products">
                        @foreach (var product in products.Items)
                        {
                            <tr @onclick="@(e => navigation.NavigateTo($"products/{product.Name}"))">
                                <td>@product.Name</td>
                                <td>@product.Description</td>
                                <td class="table-component__action">
                                    <i class="far fa-trash-alt"
                                       @onclick="@(() => Delete(product.Name))"
                                       @onclick:stopPropagation></i>
                                </td>
                            </tr>
                        }
                    </TableBody>
                </PaginationTable>
            </div>
        </div>
    </div>
</section>

<Modal Title="New Product" Show="showModal" OnClose="CloseModal">
    <ModalBody>
        <EditForm EditContext="@editContext">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="product-name">Name</label>
                <InputText id="product-name" class="form-control" @bind-Value="model.Name" placeholder="Enter product name" />
            </div>

            <div class="form-group">
                <label for="product-description">Description</label>
                <InputText id="product-description" class="form-control" @bind-Value="model.Description" placeholder="Enter product description" />
            </div>

            <div class="form-group">
                <label for="product-default-ring-name">Default Ring Name</label>
                <InputText id="product-default-ring-name" class="form-control" @bind-Value="model.DefaultRingName" placeholder="Enter product default ring name" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddProduct" disabled="@formInvalid">Save changes</button>
    </ModalFooter>
</Modal>

@code {
    private bool showModal = false;

    private bool formInvalid;
    private AddProductRequest model;
    private EditContext editContext;

    private PaginationTable<ListProductResponseDetail> table;

    private IEnumerable<BreadcrumbItemViewModel> breadcrumb = new List<BreadcrumbItemViewModel>()
    {
        new BreadcrumbItemViewModel { Title = "Home", Link = "/" },
        new BreadcrumbItemViewModel { Title = "Products", Active = true }
    };

    protected override void OnInitialized()
    {
        InitModel();

        breadcrumb = new List<BreadcrumbItemViewModel>()
{
            new BreadcrumbItemViewModel { Title = "Home", Link = "/" },
            new BreadcrumbItemViewModel { Title = "Products", Active = true }
        };
    }

    private void InitModel()
    {
        formInvalid = true;

        if (editContext != null)
        {
            editContext.OnFieldChanged -= OnFieldChanged;
        }

        model = new AddProductRequest();
        editContext = new EditContext(model);
        editContext.OnFieldChanged += OnFieldChanged;
    }

    private Task<PaginatedResult<ListProductResponseDetail>> Loader(int pageIndex, int pageCount)
    {
        return esquioHttpClient.GetProductsList(pageIndex, pageCount);
    }

    private void OnFieldChanged(object sender, FieldChangedEventArgs args)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    private async Task AddProduct()
    {
        await esquioHttpClient.AddProduct(model);
        await table.OnAdd();

        CloseModal();
        InitModel();
    }

    private async Task Delete(string productName)
    {
        await esquioHttpClient.DeleteProduct(productName);
        await table.OnDelete();
    }

    private void OpenModal()
    {
        showModal = true;
        esquioState.IsApplicationShowingWindowModal(showModal);

    }

    private void CloseModal()
    {
        showModal = false;
        esquioState.IsApplicationShowingWindowModal(showModal);
    }
}
