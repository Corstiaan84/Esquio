@page "/products/{productName}"
@attribute [Authorize(Policies.Reader)]
@layout MainLayout

@inject IEsquioHttpClient esquioHttpClient
@inject INotifications notifications
@inject IJSRuntime jsRuntime
@inject EsquioState  esquioState
@inject NavigationManager navigation

<PageTransition>
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="bottom-spacing">
                        <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Product" Cascading="true">
                            <Editable Value="@ProductName"
                                      Required="true"
                                      OnChange="@((name) => UpdateProduct(name))" />
                        </Permission>
                    </h1>
                </div>
            </div>
            <div class="row mb-2">
                <PageTitle Title="Features"
                           Subtitle="Show the collection of active features on current product.">
                    <Icon>
                        <i class="fas fa-magic"></i>
                    </Icon>
                    <Actions>
                        <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                            <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenNewFeatureModal">
                                New Feature
                            </button>
                        </Permission>
                    </Actions>
                </PageTitle>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <PaginatedTable Loader="FeatureLoader"
                                    SkeletonColumns="7"
                                    SkeletonActions="5"
                                    @ref="featuresTable">
                        <TableHeader>
                            <th class="table-col-4">Name</th>
                            <th>Description</th>
                            <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                                <th class="table-col-1"></th>
                            </Permission>
                            <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                                <th class="table-col-1"></th>
                            </Permission>
                        </TableHeader>
                        <TableBody Context="features">
                            @foreach (var feature in features.Items)
                            {
                                <tr @onclick="@(e => navigation.NavigateTo($"products/{ProductName}/{feature.Name}"))">
                                    <td>@feature.Name</td>
                                    <td>
                                        <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature" Cascading="true">
                                            <Editable Value="@feature.Description"
                                                      EmptyText="Add a feature description"
                                                      OnChange="@((description) => UpdateFeature(feature.Name, description))" />
                                        </Permission>
                                    </td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                                        <td class="table-component__action">
                                            <ConfirmableAction Title="Archive"
                                                               Icon="fas fa-archive"
                                                               OnConfirm="@(() => ArchiveFeature(feature.Name))"
                                                               ConfirmTitle="Archive Feature"
                                                               ConfirmDescription="@($"Are you sure you want to archive the '{feature.Name}' feature?")" />
                                        </td>
                                    </Permission>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                                        <td class="table-component__action">
                                            <ConfirmableAction Title="Delete"
                                                               Icon="far fa-trash-alt"
                                                               OnConfirm="@(() => DeleteFeature(feature.Name))"
                                                               ConfirmTitle="Delete Feature"
                                                               ConfirmDescription="@($"Are you sure you want to delete the '{feature.Name}' feature?")" />
                                        </td>
                                    </Permission>
                                </tr>
                            }
                        </TableBody>
                    </PaginatedTable>
                </div>
            </div>
        </div>
    </section>

    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <PageTitle Title="Rings"
                           Subtitle="Defined Rings on this product, Rings allow configure different Toggle values for each ring and test configurations on different ring/environments.">
                    <Icon>
                        <i class="fas fa-ring"></i>
                    </Icon>
                    <Actions>
                        <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Ring">
                            <button type="button" class="btn btn-primary btn-shadow" @onclick="OpenNewDeploymentModal">
                                New Ring
                            </button>
                        </Permission>
                    </Actions>
                </PageTitle>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <SingleTable Loader="RingsLoader" @ref="deploymentTable">
                        <TableHeader>
                            <th class="table-col-4">Name</th>
                            <th></th>
                            <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Ring">
                                <th class="table-col-1"></th>
                            </Permission>
                        </TableHeader>
                        <TableBody Context="response">
                            @foreach (var ring in response.Rings)
                            {
                                <tr>
                                    <td colspan="2">
                                        @ring.Name
                                        @if (ring.Default)
                                        {
                                            <span class="badge badge-info">default ring</span>
                                        }
                                    </td>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Ring">
                                        <td class="table-component__action">
                                            @if (!ring.Default)
                                            {
                                                <ConfirmableAction Title="Delete"
                                                                   Icon="far fa-trash-alt"
                                                                   OnConfirm="@(() => DeleteRing(ring.Name))"
                                                                   ConfirmTitle="Delete Ring"
                                                                   ConfirmDescription="@($"Are you sure you want to delete the '{ring.Name}' ring?")" />
                                            }
                                        </td>
                                    </Permission>
                                </tr>
                            }
                        </TableBody>
                    </SingleTable>
                </div>
            </div>
        </div>
    </section>
</PageTransition>

<Modal Title="New Feature" Show="showNewFeatureModal" OnClose="CloseNewFeatureModal">
    <ModalBody>
        <EditForm EditContext="@newFeatureEditContext">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="feature-name">Name</label>
                <InputText id="feature-name" class="form-control" @bind-Value="newFeatureModel.Name" placeholder="Enter feature name" />
            </div>

            <div class="form-group">
                <label for="feature-description">Description</label>
                <InputText id="feature-description" class="form-control" @bind-Value="newFeatureModel.Description" placeholder="Enter feature description" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseNewFeatureModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddFeature" disabled="@newFeatureFormInvalid">Save changes</button>
    </ModalFooter>
</Modal>

<Modal Title="New Ring" Show="showNewDeploymentModal" OnClose="CloseNewDeploymentModal">
    <ModalBody>
        <EditForm EditContext="@newDeploymentEditContext">
            <FluentValidationValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="ring-name">Name</label>
                <InputText id="ring-name" class="form-control" @bind-Value="newDeploymentModel.Name" placeholder="Enter ring name" />
            </div>
        </EditForm>
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-default" @onclick="CloseNewDeploymentModal" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddNewDeployment" disabled="@newDeploymentFormInvalid">Save changes</button>
    </ModalFooter>
</Modal>

@code {

    [Parameter] public string ProductName { get; set; }

    //Feature form parameters
    private bool showNewFeatureModal = false;
    private bool newFeatureFormInvalid = true;
    private AddFeatureRequest newFeatureModel;
    private EditContext newFeatureEditContext;
    private PaginatedTable<ListFeatureResponseDetail> featuresTable;

    //Rings form parameters
    private bool showNewDeploymentModal = false;
    private bool newDeploymentFormInvalid = true;
    private AddDeploymentRequest newDeploymentModel;
    private EditContext newDeploymentEditContext;
    private SingleTable<DetailsProductResponse> deploymentTable;

    protected override void OnInitialized()
    {
        InitFeatureModel();
        InitDeploymentModel();

        esquioState.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Link = "products" },
            new BreadcrumbItemViewModel { Title = ProductName, Active = true });
    }

    private void InitFeatureModel()
    {
        newFeatureFormInvalid = true;

        newFeatureModel = new AddFeatureRequest();
        newFeatureEditContext = new EditContext(newFeatureModel);
        newFeatureEditContext.OnValidationStateChanged += OnAddFeatureValidationChanged;
    }

    private void OpenNewFeatureModal()
    {
        InitFeatureModel();
        showNewFeatureModal = true;

        esquioState.SetWindowModal(showNewFeatureModal);
    }

    private void CloseNewFeatureModal()
    {
        showNewFeatureModal = false;
        newFeatureEditContext.OnValidationStateChanged -= OnAddFeatureValidationChanged;

        esquioState.SetWindowModal(showNewFeatureModal);
    }

    private void OnAddFeatureValidationChanged(object sender, ValidationStateChangedEventArgs args)
    {
        newFeatureFormInvalid = !newFeatureEditContext.IsValid();
        StateHasChanged();
    }

    private Task<PaginatedResult<ListFeatureResponseDetail>> FeatureLoader(int pageIndex, int pageCount)
    {
        return esquioHttpClient.GetProductFeaturesList(ProductName, pageIndex, pageCount);
    }

    private async Task ArchiveFeature(string featureName)
    {
        var result = await esquioHttpClient.ArchiveFeature(ProductName, featureName);
        await featuresTable.Reload();

        if (result)
        {
            notifications.Success("Archive Feature", "Feature successfully archived!");
        }
        else
        {
            notifications.Error("Archive Feature", "Error archiving the feature");
        }
    }

    private async Task AddFeature()
    {
        var result = await esquioHttpClient.AddFeature(ProductName, newFeatureModel);
        await featuresTable.OnAdd();

        CloseNewFeatureModal();
        InitFeatureModel();

        if (result)
        {
            notifications.Success("Add Feature", "Feature successfully added!");
        }
        else
        {
            notifications.Error("Add Feature", "Error adding the feature");
        }
    }

    private async Task DeleteFeature(string featureName)
    {
        var result = await esquioHttpClient.DeleteFeature(ProductName, featureName);
        await featuresTable.OnDelete();

        if (result)
        {
            notifications.Success("Delete Feature", "Feature successfully deleted!");
        }
        else
        {
            notifications.Error("Delete Feature", "Error deleting the feature");
        }
    }

    private void InitDeploymentModel()
    {
        newDeploymentFormInvalid = true;

        newDeploymentModel = new AddDeploymentRequest();
        newDeploymentEditContext = new EditContext(newDeploymentModel);
        newDeploymentEditContext.OnValidationStateChanged += OnAddRingValidationChanged;

    }

    private void OnAddRingValidationChanged(object sender, ValidationStateChangedEventArgs args)
    {
        newDeploymentFormInvalid = !newDeploymentEditContext.IsValid();
        StateHasChanged();
    }

    private void OpenNewDeploymentModal()
    {
        showNewDeploymentModal = true;
        InitDeploymentModel();

        esquioState.SetWindowModal(showNewDeploymentModal);
    }

    private void CloseNewDeploymentModal()
    {
        showNewDeploymentModal = false;
        newDeploymentEditContext.OnValidationStateChanged -= OnAddRingValidationChanged;

        esquioState.SetWindowModal(showNewDeploymentModal);
    }

    private Task<DetailsProductResponse> RingsLoader()
    {
        return esquioHttpClient.GetProduct(ProductName);
    }

    private async Task AddNewDeployment()
    {
        var result = await esquioHttpClient.AddProductDeployment(ProductName, newDeploymentModel);
        await deploymentTable.OnAdd();

        CloseNewDeploymentModal();
        InitDeploymentModel();

        if (result)
        {
            notifications.Success("Add Product Ring", "Product ring successfully added!");
        }
        else
        {
            notifications.Error("Add Product Ring", "Error adding the product ring");
        }
    }

    private async Task DeleteRing(string deploymentName)
    {
        var result = await esquioHttpClient.DeleteProductDeployment(ProductName, deploymentName);
        await deploymentTable.OnDelete();

        CloseNewDeploymentModal();
        InitDeploymentModel();

        if (result)
        {
            notifications.Success("Delete Product Ring", "Product ring successfully deleted!");
        }
        else
        {
            notifications.Error("Delete Product Ring", "Error deleting the product ring");
        }
    }

    private async Task UpdateProduct(string name)
    {
        var product = await esquioHttpClient.GetProduct(ProductName);

        var result = await esquioHttpClient.UpdateProduct(
        ProductName,
        new UpdateProductRequest
        {
            Name = name,
            Description = product.Description
        });

        // Sync product name parameter
        ProductName = name;

        // Sync breadcrumb
        esquioState.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Link = "products" },
            new BreadcrumbItemViewModel { Title = ProductName, Active = true });

        // Sync browser history
        await jsRuntime.InvokeVoidAsync("historyReplaceState", ProductName);

        if (result)
        {
            notifications.Success("Update Product", "Product successfully updated!");
        }
        else
        {
            notifications.Error("Update Product", "Error updating the product");
        }
    }

    private async Task UpdateFeature(string featureName, string featureDescription)
    {
        var feature = await esquioHttpClient.GetFeatureDetails(ProductName, featureName);

        var result = await esquioHttpClient.UpdateFeature(
        ProductName,
        featureName,
        new UpdateFeatureRequest
        {
            Name = featureName,
            Description = featureDescription
        });

        if (result)
        {
            notifications.Success("Update Feature", "Feature successfully updated!");
        }
        else
        {
            notifications.Error("Update Feature", "Error updating the feature");
        }
    }
}
