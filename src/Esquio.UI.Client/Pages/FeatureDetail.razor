@page "/products/{productName}/{featureName}"
@attribute [Authorize(Policies.Reader)]
@layout MainLayout


@inject IEsquioHttpClient esquioHttpClient
@inject INotifications notifications
@inject IJSRuntime jsRuntime
@inject EsquioState  esquioState

<PageTransition>
    <div class="row">
        <div class="col-sm-12">
            <section class="content-header">
                <div class="container-fluid">
                    <h1>
                        <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature" Cascading="true">
                            <Editable Value="@FeatureName"
                                      Required="true"
                                      OnChange="@((name) => UpdateFeature(name))" />
                        </Permission>
                    </h1>
                </div>
            </section>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-12 col-lg-9">
            <section class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-12">
                            <PageTitle Title="Toggles"
                                       Subtitle="Show the collection of active toggles on current feature.">
                                <Icon>
                                    <i class="fas fa-toggle-on"></i>
                                </Icon>
                                <Actions>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle">
                                        <NavLink href="@($"/products/{ProductName}/{FeatureName}/toggles/add")">
                                            <button type="button" class="btn btn-primary btn-shadow">
                                                New Toggle
                                            </button>
                                        </NavLink>
                                    </Permission>
                                </Actions>
                            </PageTitle>
                        </div>
                    </div>
                </div>
            </section>
            <section class="content">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-12">
                            <SingleTable Loader="TogglesLoader" @ref="togglesTable" SkeletonColumns="4" SkeletonActions="2">
                                <TableHeader>
                                    <th class="table-col-4">Name</th>
                                    <th></th>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle">
                                        <th class="table-col-1"></th>
                                        <th class="table-col-1"></th>
                                    </Permission>
                                </TableHeader>
                                <TableBody Context="response">
                                    @if (!response.Toggles.Any())
                                    {
                                        <tr>
                                            <td colspan="4"
                                                style="text-align: center;">
                                                No items to list
                                            </td>
                                        </tr>
                                    }
                                    @foreach (var toggle in response.Toggles)
                                    {
                                        <tr @onclick="@(() => EditToggle(toggle.Type))">
                                            <td colspan="2">
                                                @toggle.FriendlyName
                                            </td>
                                            <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle">
                                                <td class="table-component__action">
                                                    <IconButton Title="Edit"
                                                                Icon="far fa-edit"
                                                                OnClick="@(() => EditToggle(toggle.Type))" />
                                                </td>
                                                <td class="table-component__action">
                                                    <ConfirmableAction Title="Delete"
                                                                       Icon="far fa-trash-alt"
                                                                       OnConfirm="@(() => DeleteToggle(toggle.Type))"
                                                                       ConfirmTitle="Delete Toggle"
                                                                       ConfirmDescription="@($"Are you sure you want to delete the '{toggle.FriendlyName}' toggle?")" />
                                                </td>
                                            </Permission>
                                        </tr>
                                    }
                                </TableBody>
                            </SingleTable>

                            <SingleTable Loader="TogglesLoader" @ref="statesTable" SkeletonColumns="4" SkeletonActions="2">
                                <TableHeader>
                                    <th class="table-col-3">Ring State</th>
                                    <th></th>
                                    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle">
                                        <th class="table-col-1"></th>
                                    </Permission>
                                </TableHeader>
                                <TableBody Context="response">
                                    @foreach (var state in response.States)
                                    {
                                        <tr>
                                            <td colspan="2">
                                                @state.RingName
                                            </td>
                                            <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Feature">
                                                <td class="table-component__action">
                                                    <Switch Title="Enable/Disable"
                                                            Checked="state.Enabled"
                                                            OnChange="@(() => ToggleState(state.Enabled,state.RingName))">
                                                    </Switch>
                                                </td>
                                            </Permission>
                                        </tr>
                                    }
                                </TableBody>
                            </SingleTable>
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <div class="col-md-12 col-lg-3">
            <section class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-12">
                            <aside>
                                <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle" Cascading="true">
                                    <Tags Subtitle="Show the collection of active tags on current feature."
                                          TagsLoader="TagsLoader"
                                          OnAdd="AddTag"
                                          OnDelete="DeleteTag" />
                                </Permission>
                            </aside>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</PageTransition>

@if (editToggle != default)
{
    <Permission Requires="PolicyAction.Modify" Over="PolicySubject.Toggle" Cascading="true">
        <Modal Title="@editToggle.FriendlyName" Show="showEditToggleModal" OnClose="CloseModal">
            <ModalBody>
                <form role="form">
                    <div class="form-group">
                        <label>Ring</label>
                        <ProductRings ProductName="@ProductName" OnChange="OnRingChange" />
                    </div>
                    @if (editRing != default)
                    {
                        <fieldset @key="editRing">
                            @foreach (var parameter in ringToggleParameters)
                            {
                                <ToggleParameter Parameter="parameter" OnParameterChange="OnParameterChange" />
                            }
                        </fieldset>
                    }
                </form>
            </ModalBody>
            <ModalFooter>
                <button type="button" class="btn btn-default" @onclick="CloseModal" data-dismiss="modal">Close</button>
                <Button OnClick="AddToggleParameters">Save changes</Button>
            </ModalFooter>
        </Modal>
    </Permission>
}

@code {
    [Parameter] public string ProductName { get; set; }
    [Parameter] public string FeatureName { get; set; }


    private SingleTable<DetailsFeatureResponse> togglesTable;
    private SingleTable<DetailsFeatureResponse> statesTable;

    //Edit toggle parameters
    private bool showEditToggleModal = false;
    private DetailsToggleResponse editToggle;
    private string editRing;
    private string defaultRing;
    private IEnumerable<ToggleParameterViewModel> editToggleParameters;
    private IEnumerable<ToggleParameterViewModel> ringToggleParameters;
    private IDictionary<string, AddParameterToggleRequest> editedToggleParameters;

    protected override void OnInitialized()
    {
        esquioState.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Link = "products" },
            new BreadcrumbItemViewModel { Title = ProductName, Link = $"products/{ProductName}" },
            new BreadcrumbItemViewModel { Title = FeatureName, Active = true });

        ResetState();
    }

    private void ResetState()
    {
        editRing = default;
        defaultRing = default;
        editToggle = default;
        ringToggleParameters = new List<ToggleParameterViewModel>();
        editedToggleParameters = new Dictionary<string, AddParameterToggleRequest>();
    }

    private Task<DetailsFeatureResponse> TogglesLoader()
    {
        return esquioHttpClient.GetFeatureDetails(ProductName, FeatureName);
    }

    private async Task DeleteToggle(string toggleType)
    {
        var result = await esquioHttpClient.DeleteToggle(ProductName, FeatureName, toggleType);
        await togglesTable.OnDelete();

        if (result)
        {
            notifications.Success("Delete Toggle", "Toggle successfully deleted!");
        }
        else
        {
            notifications.Error("Delete Toggle", "Error deleting the toggle");
        }
    }

    private Task<IEnumerable<TagResponseDetail>> TagsLoader()
    {
        return esquioHttpClient.GetTagsList(ProductName, FeatureName);
    }

    private async Task AddTag(AddTagRequest addTagRequest)
    {
        var result = await esquioHttpClient.AddTag(ProductName, FeatureName, addTagRequest);

        if (result)
        {
            notifications.Success("Add Tag", "Tag successfully added!");
        }
        else
        {
            notifications.Error("Add Tag", "Error adding the tag");
        }
    }

    private async Task DeleteTag(DeleteTagRequest deleteTagRequest)
    {
        var result = await esquioHttpClient.DeleteTag(ProductName, FeatureName, deleteTagRequest.Tag);

        if (result)
        {
            notifications.Success("Delete Tag", "Tag successfully deleted!");
        }
        else
        {
            notifications.Error("Delete Tag", "Error deleting the tag");
        }
    }

    private async Task ToggleState(bool state, string ringName)
    {
        bool requestSuccess = false;

        if (state)
        {
            requestSuccess = await esquioHttpClient.RollbackFeature(ProductName, ringName, FeatureName);
        }
        else
        {
            requestSuccess = await esquioHttpClient.RolloutFeature(ProductName, ringName, FeatureName);

        }

        await statesTable.Reload();

        if (requestSuccess)
        {
            notifications.Success("Toggle State Feature", "Toggle state feature success!.");
        }
        else
        {
            notifications.Error("Toggle State  Feature", "Error toggling the state of this feature!.");
        }
    }

    private async Task EditToggle(string toggleType)
    {
        var details = esquioHttpClient.GetToggleDetails(ProductName, FeatureName, toggleType);
        var reveal = esquioHttpClient.RevealToggle(toggleType);

        await Task.WhenAll(details, reveal);

        editToggle = details.Result;

        editToggleParameters = details
            .Result
            .Parameters
            .Select(parameter => (parameter, reveal.Result.Parameters.Find(p => p.Name.Equals(parameter.Name))))
            .Select((source, index) =>
            {
                var (parameter, reveal) = source;
                return new ToggleParameterViewModel(
                    parameter.Name,
                    reveal.ClrType,
                    parameter.Value,
                    parameter.RingName,
                    index,
                    reveal.Description);
            });

        OpenModal();
    }

    private IEnumerable<ToggleParameterViewModel> GetParametersByRing(string ringName)
    {
        var @default = editToggleParameters.Where(t => t.RingName == defaultRing).OrderBy(p => p.Order);
        var parameters = editToggleParameters.Where(t => t.RingName == ringName).OrderBy(p => p.Order);

        if (!parameters.Any())
        {
            foreach (var item in @default)
            {
                OnParameterChange(item);
            }
        }

        return parameters.Any() ? parameters : @default;
    }

    private void OpenModal()
    {
        showEditToggleModal = true;
        esquioState.SetWindowModal(showEditToggleModal);
    }

    private void CloseModal()
    {
        showEditToggleModal = false;
        esquioState.SetWindowModal(showEditToggleModal);
        ResetState();
    }

    private void OnRingChange(string ring)
    {
        editRing = ring;
        if (defaultRing == default) defaultRing = ring;
        ringToggleParameters = GetParametersByRing(ring);
    }

    private ToggleParameterViewModel GetDefaultParameter(string name)
        => editToggleParameters.Single(p => p.RingName == defaultRing && p.Name == name);

    private void OnParameterChange(ToggleParameterViewModel parameter)
    {
        // Fallback to default in cleared parameters.
        if (parameter.IsEmpty) parameter = GetDefaultParameter(parameter.Name);

        if (editedToggleParameters.ContainsKey(parameter.Name))
        {
            editedToggleParameters[parameter.Name].Value = parameter.Value;
            editedToggleParameters[parameter.Name].RingName = editRing;
        }
        else
        {
            editedToggleParameters.Add(parameter.Name, new AddParameterToggleRequest
            {
                ProductName = ProductName,
                FeatureName = FeatureName,
                RingName = editRing,
                ToggleType = editToggle.Type,
                Name = parameter.Name,
                Value = parameter.Value
            });
        }
    }

    private async Task AddToggleParameters()
    {
        if (!editedToggleParameters.Any())
        {
            CloseModal();
            return;
        }

        var tasks = new List<Task<bool>>();

        foreach (var parameter in editedToggleParameters)
        {
            tasks.Add(esquioHttpClient.AddToggleParameter(parameter.Value));
        }

        await Task.WhenAll(tasks);

        var result = tasks.Select(t => t.Result).Aggregate((a, b) => a && b);

        CloseModal();

        if (result)
        {
            notifications.Success("Update Toggle", "Toggle successfully updated!");
        }
        else
        {
            notifications.Error("Update Toggle", "Error updating the toggle");
        }
    }

    private async Task UpdateFeature(string name)
    {
        var feature = await esquioHttpClient.GetFeatureDetails(ProductName, FeatureName);

        var result = await esquioHttpClient.UpdateFeature(
        ProductName,
        FeatureName,
        new UpdateFeatureRequest
        {
            Name = name,
            Description = feature.Description
        });

        // Sync feature name parameter
        FeatureName = name;

        // Sync breadcrumb
        esquioState.SetBreadcrumb(
            new BreadcrumbItemViewModel { Title = "Home", Link = "#" },
            new BreadcrumbItemViewModel { Title = "Products", Link = "products" },
            new BreadcrumbItemViewModel { Title = ProductName, Link = $"products/{ProductName}" },
            new BreadcrumbItemViewModel { Title = FeatureName, Active = true });

        // Sync browser history
        await jsRuntime.InvokeVoidAsync("historyReplaceState", FeatureName);

        if (result)
        {
            notifications.Success("Update Feature", "Feature successfully updated!");
        }
        else
        {
            notifications.Error("Update Feature", "Error updating the feature");
        }
    }
}
